<h3 id="prerequisite-for-live-1-deployment">Prerequisite for Live-1 deployment</h3><p><strong>This section only applies to applications aiming to be deployed to Live-1.</strong></p>
<p>In Live-1, the Cloud Platform team introduced <a href="https://kubernetes.io/docs/concepts/policy/pod-security-policy/">Pod Security Policies</a>, to
tighten the security on this production cluster.  Two policies have been
applied to the cluster, <em>restricted</em> and <em>privileged</em>.</p>
<p>By default, any new environment/namespace on Live-1 will be assigned the
<em>restricted</em> policy</p>
<h4 id="impact">Impact</h4><p>The main impact of this <em>restricted</em> policy is that it prevents pods/containers
from running as the root user. A container&rsquo;s user is usually defined in its
Dockerfile. If no user is explicitly specified in the Dockerfile, the chances
are that it will run as root.</p>
<p>It is important to understand that not being able to use root also implies that
it is impossible to bind to a privileged port (e.g. 80, 443).</p>
<p>The policies only take effect after the container has started. Anything in the
Dockerfile can be run as root at image build time e.g. to install required
software.</p>
<h4 id="how-to-adapt-to-the-pod-security-policies">How to adapt to the pod security policies</h4><p>Most of the time, your application&rsquo;s Dockerfile can be easily adapted by:</p>

<ul>
<li><p>Creating a user with a UID which is greater than 1 (which is the UID
reserved for root)</p></li>
<li><p>Giving this user any required permissions to access the files/directories
the application requires.</p></li>
<li><p>Adding a <code>USER</code> clause in your Dockerfile to switch to your non-root user</p></li>
</ul>
<p>Example:</p>
<div class="highlight"><pre class="highlight yaml"><code><span class="s">FROM busybox</span>

<span class="s">RUN mkdir -p /opt/myFolder &amp;&amp; \</span>
    <span class="s">adduser --disabled-password myNewUser -u 1001 &amp;&amp; \</span>
    <span class="s">chown -R myNewUser:myNewUser /opt/myFolder</span>

<span class="s">USER 1001</span>

<span class="s">CMD myApplication</span>
</code></pre></div><p>Depending on the base image, you might also need to explicitly create a group
for the user. In the busybox example above, a &lsquo;myNewUser&rsquo; group is implicitly
created by the adduser command.</p>
<p><strong>You must specify the user by its numeric UID</strong>, as above, not by its
username.  If you use the username (<code>USER myNewUser</code>) then the pod security
policy will not be able to tell that that is a non-root user, and your
container will not be scheduled.</p>
<p>A more complete example can be found here :
<a href="https://github.com/ministryofjustice/cloud-platform-multi-container-demo-app/blob/master/rails-app/Dockerfile">Dockerfile</a></p>
<h5 id="adapting-the-nginx-image">Adapting the NGINX image</h5><p>Since NGINX binds itself to a privileged port by default, it will not be able
to run as-is with the <em>restricted</em> policy.</p>
<p>The cloud-platform team will update this page with relevant documentation
regarding nginx, as soon as it is ready.  In the meantime, feel free to reach
out to the cloud-platform team for help : <a href="getting-help.html">Getting Help</a></p>
