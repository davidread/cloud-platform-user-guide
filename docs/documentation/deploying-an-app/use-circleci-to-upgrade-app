<h3 id="continuous-deployment-of-an-application-using-circleci-and-helm">Continuous Deployment of an application using CircleCI and Helm</h3><h4 id="introduction">Introduction</h4><p>This document covers how to continuously deploy your application in the Cloud Platform. It is essentially a continuation of <a href="archive.html#deploying-an-application-to-the-cloud-platform-with-helm">‘Deploying an application to the Cloud Platform with Helm’</a>.</p>
<p><em>Note: This document is specific to using <a href="https://circleci.com/">CircleCI</a> as the Continuous Integration method.</em></p>
<h5 id="objective">Objective</h5><p>By the end of the tutorial, you will have done the following:</p>

<ul>
<li>Created a Service Account for CircleCI in your namespace</li>
<li>Generated a CircleCI configuration file in your application repository. The configuration file will authenticate with your chosen cluster, build a docker image and push it to ECR and upgrade your helm deployment with the new docker image.</li>
<li>Have an automated CircleCI pipeline that upgrades your helm deployment when a new change is pushed to your master branch</li>
</ul>
<h5 id="requirements">Requirements</h5><p>It is assumed you have the following:</p>

<ul>
<li>You have <a href="tasks.html#creating-a-cloud-platform-environment">created an environment for your application</a></li>
<li>You have <a href="archive.html#deploying-an-application-to-the-cloud-platform-with-helm">deployed an application</a> to the &lsquo;cloud-platform-live-1&rsquo; cluster using Helm.</li>
<li>You have created an <a href="tasks.html#creating-an-ecr-repository">ECR repository</a></li>
</ul>
<h5 id="creating-a-service-account-for-circleci">Creating a Service Account for CircleCI</h5><p>As part of the CircleCI deployment pipeline, CircleCI will need to authenticate with the Kubernetes cluster. In order to do so, Kubernetes uses <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">Service Accounts</a>. Service Accounts provide an identity for processes that run in a cluster allowing the process to access the API server.</p>
<p>A Service Account is created in the <a href="https://github.com/ministryofjustice/cloud-platform-environments/tree/master/namespaces">namespace creation github repository</a>.
&ldquo;`bash
  $ kubectl get serviceaccounts &ndash;namespace $ns
  NAME       SECRETS   AGE
  circleci   1         3h</p>
<p>$ kubectl get serviceaccounts/circleci &ndash;namespace reference-app -o yaml
  apiVersion: v1
  kind: ServiceAccount
  &hellip;
  secrets:
  - name: circleci-token-prlkp</p>
<p>$ kubectl get secrets &ndash;namespace $ns
  NAME                   TYPE                                  DATA      AGE
  circleci-token-prlkp   kubernetes.io/service-account-token   3         3h</p>
<p>$ kubectl get secrets/circleci-token-prlkp &ndash;namespace $ns -o yaml
  &hellip;
  namespace: cm..cA==
  token: ZX&hellip;EE=
&rdquo;`</p>
<h5 id="linking-repository-to-circleci">Linking Repository to CircleCI</h5><p>MoJ has as an account with CircleCI, please login to <a href="https://circleci.com/dashboard">CircleCI</a> using GitHub credentials. Select project, and if config.yml is in the repo CircleCI will build and run tests.</p>
<h5 id="add-variables-to-circleci">Add variables to CircleCI</h5><p>There is a number of environment variables that you will need to set on your CircleCI project in order to build a docker image, push it to the ECR and trigger a deployment in your environment. On the project page, click the cog icon in the top right corner and select <code>Enviroment Variables</code> under <code>Build Settings</code>. The variables you will need to set are listed below.</p>
<h6 id="aws-credentials">AWS credentials</h6><p>To authenticate with ECR, you will need to set:
- <code>AWS_DEFAULT_REGION</code> - would be <code>eu-west-2</code> for Cloud Platform clusters unless specified otherwise
- <code>AWS_ACCESS_KEY_ID</code>
- <code>AWS_SECRET_ACCESS_KEY</code>
- <code>ECR_ENDPOINT</code> is optional but useful if you want to avoid having to hardcode the full hostname of the registry</p>
<h6 id="kubernetes-serviceaccount-credentials">Kubernetes <code>ServiceAccount</code> credentials</h6><p>Since a single CircleCI project will need to access multiple namespaces in kubernetes (the environments), it will also need to handle multiple credentials. To simplify authentication, we provide a helper script in our supported <a href="https://github.com/ministryofjustice/cloud-platform-tools-image">build image</a>. For a usage example, see <a href="###upload-to-ecr">Deploy To Kubernetes</a> below.</p>
<p>There are four different variables that CircleCI will need to access <em>per environment</em>. Our helper script expects environment variables to be named according to the list below where <code>&lt;ENVIRONMENT&gt;</code> should be replaced by some identifier of your choosing (eg.: <code>STAGING</code>, <code>PRODUCTION</code>).
- <code>KUBE_ENV_&lt;ENVIRONMENT&gt;_NAME</code> - the full name of the cluster (eg.: <code>live-1.cloud-platform.service.justice.gov.uk</code>)
- <code>KUBE_ENV_&lt;ENVIRONMENT&gt;_NAMESPACE</code> - the name of the <code>Namespace</code> (see <a href="tasks.html#creating-a-cloud-platform-environment">Create a namespace</a>)
- <code>KUBE_ENV_&lt;ENVIRONMENT&gt;_CACERT</code> - the CA Certificate for the cluster, can be acquired from the <code>Secret</code> that is generated for the <code>ServiceAccount</code>
- <code>KUBE_ENV_&lt;ENVIRONMENT&gt;_TOKEN</code> - the access token generated for the <code>ServiceAccount</code>. Please note, you should first base64 decode the token value you retrieve from the secret <a href="###creating-a-service-account-for-circleci">in the previous section</a>, e.g. <code>echo &lt;thereallylongstringthatyougetback&gt; | base64 --decode</code>.</p>
<h5 id="creating-the-config-yml">Creating the config.yml</h5><p>CircleCI uses a YAML file to identify how you want your testing environment set up and what tests you want to run. On CircleCI 2.0, this file must be called <code>config.yml</code> and must be in a hidden folder called <code>.circleci</code> .</p>
<p><a href="https://circleci.com/docs/2.0/tutorials/">Tutorial</a> on creating a config.yml file. As long as you are building a Docker image you can configure Circle however you wish. The only additional configuration you will need to add is to upload an image to ECR and deploy to Kubernetes:</p>
<h6 id="upload-to-ecr">Upload to ECR</h6><p>Example of how you can push a built docker image to an ECR repository:</p>
<div class="highlight"><pre class="highlight yaml"><code><span class="pi">-</span> <span class="na">deploy</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Push application Docker image</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="no">$(aws ecr get-login --no-include-email)</span>
      <span class="no">docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"</span>
      <span class="no">docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"</span>
      <span class="no">if [ "${CIRCLE_BRANCH}" == "master" ]; then</span>
        <span class="no">docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:latest"</span>
        <span class="no">docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:latest"</span>
      <span class="no">fi</span>
</code></pre></div><h6 id="deploy-to-kubernetes">Deploy to Kubernetes</h6><p>We provide a docker image that simplifies the CircleCI configuration by encapsulating the authentication process in a script. For example, given a configured <code>DEVELOPMENT</code> environment (see the section on environment variables above):</p>
<div class="highlight"><pre class="highlight yaml"><code><span class="na">deploy_development</span><span class="pi">:</span>
  <span class="na">docker</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">${ECR_ENDPOINT}/cloud-platform/tools:circleci</span>
  <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">checkout</span>
    <span class="pi">-</span> <span class="na">deploy</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">Helm deployment</span>
        <span class="na">command</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="no">setup-kube-auth</span>
          <span class="no">kubectl config use-context development</span>
          <span class="no">if [ "${CIRCLE_BRANCH}" == "master" ]; then</span>
            <span class="no">helm upgrade ${APPLICATON_DEPLOY_NAME} ./helm_deploy/django-app/. \</span>
                          <span class="no">--install \</span>
                          <span class="no">--tiller-namespace=${NON_PROD_NS} \</span>
                          <span class="no">--namespace=${NON_PROD_NS} \</span>
                          <span class="no">--set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}" \</span>
                          <span class="no">--set image.tag="latest" \</span>
                          <span class="no">--set deploy.host="${APPLICATION_HOST_URL}" \</span>
                          <span class="no">--set replicaCount="4" \</span>
                          <span class="no">--debug</span>
          <span class="no">fi</span>
</code></pre></div>