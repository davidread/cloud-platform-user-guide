<h3 id="getting-application-metrics-into-prometheus">Getting application metrics into Prometheus</h3><h4 id="overview">Overview</h4><p>This guide will walk you through the steps to export metrics from your application into the <a href="https://https//prometheus.cloud-platform.service.justice.gov.uk/">Cloud Platform Prometheus</a>. By exporting these metrics into Prometheus you can create useful observability tools like Grafana dashboards and triggered alerts on things like crashing pods and failed deployments. To do that, Prometheus needs to be able to scrape data from a <code>/metrics</code> endpoint, which is created by a <a href="https://prometheus.io/docs/instrumenting/clientlibs/">Prometheus client library</a>. Once you have a <code>/metrics</code> endpoint you can create a <code>ServiceMonitor</code> to connect the Cloud Platform Prometheus to your endpoint and store data for querying.</p>
<p>The example application in this document will be the <a href="https://github.com/ministryofjustice/cloud-platform-multi-container-demo-app/">Ruby reference app</a>, utilising the Ruby <a href="https://github.com/prometheus/client_ruby">prometheus-client</a> gem. If you&rsquo;re following along in another language, Prometheus offers a several <a href="https://prometheus.io/docs/instrumenting/clientlibs/">client libraries</a> to get you started. At the end you should have a working <code>/metrics</code> endpoint that displays your site&rsquo;s response time, which we can use to query the application latency in the Cloud Platform Prometheus.</p>
<p>The application latency <a href="https://prometheus.io/docs/concepts/metric_types/">metric</a> is quite basic but our intention is to get you started.</p>
<h4 id="assumptions">Assumptions</h4><p>To keep this document short we will assume you already have an application up and running in a namespace on the Cloud Platform, if not, please see <a href="https://user-guide.cloud-platform.service.justice.gov.uk/tasks.html#deploying-a-multi-container-application-to-the-cloud-platform">Deploying a multi-container application to the Cloud Platform</a>.</p>
<h4 id="changing-the-application-code">Changing the application code</h4><p>We need to add the Prometheus Ruby client library via a gem to give us our <code>/metrics</code> endpoint.</p>
<p>First, add the gem to your Gemfile and install with bundler.</p>
<div class="highlight"><pre class="highlight plaintext"><code>gem `prometheus-client`
</code></pre></div><p>Next, we need to amend the <code>config.ru</code> file and include the two <code>rack</code> middlewares required by the <code>prometheus-client</code>.</p>
<div class="highlight"><pre class="highlight plaintext"><code>require_relative 'config/environment'
require 'prometheus/middleware/collector'
require 'prometheus/middleware/exporter'

use Prometheus::Middleware::Collector
use Prometheus::Middleware::Exporter

run Rails.application
</code></pre></div><p>If you&rsquo;re running this locally, you&rsquo;ll now be able to query your <code>/metrics</code> endpoint and see some metrics data. If nothing appears, or metrics cannot be found, this hasn&rsquo;t worked.</p>
<div class="highlight"><pre class="highlight plaintext"><code>curl localhost:3000/metrics
</code></pre></div><p>Build, tag and push your application changes to your code repository and deploy the latest version into your Cloud Platform namespace. Confirm your <code>/metrics</code> endpoint is now accessible from your url.</p>
<div class="highlight"><pre class="highlight plaintext"><code>curl https://myapp.cloud-platform/metrics
</code></pre></div><h4 id="add-service-endpoint-and-servicemonitor">Add Service endpoint and ServiceMonitor</h4><p>We need to expose the metrics endpoint with a <code>Service</code> and tell the Cloud Platform Prometheus to scrape the endpoint with a <code>ServiceMonitor</code> object in Kubernetes. A <code>ServiceMonitor</code> is a custom resource definition (<a href="https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/">CRD</a>) that allows you to automatically generate Prometheus scrape configuration based on a specified resource.</p>
<p>In this example, we&rsquo;re using the same port to expose both our application and metrics endpoint so we&rsquo;ll need to query our existing <code>Service</code> for the current port name. However, if you&rsquo;re exposing a different port you&rsquo;ll need to either amend your current <code>Service</code> or create a new one.</p>
<p>Let&rsquo;s find out our current port name and number by running:</p>
<div class="highlight"><pre class="highlight plaintext"><code>kubectl -n &lt;namespace&gt; get svc rails-app-service -o=jsonpath={.spec.ports[0].name}
</code></pre></div><p>As you can see, the name of the port we&rsquo;re exposing is <code>http</code>.</p>
<p>Create and apply your service monitor <code>&lt;application&gt;-serviceMonitor.yaml</code>, as below:</p>
<div class="highlight"><pre class="highlight yaml"><code>   <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">monitoring.coreos.com/v1</span>
   <span class="na">kind</span><span class="pi">:</span> <span class="s">ServiceMonitor</span>
   <span class="na">metadata</span><span class="pi">:</span>
     <span class="na">name</span><span class="pi">:</span> <span class="s">rails-app-service</span>
   <span class="na">spec</span><span class="pi">:</span>
     <span class="na">selector</span><span class="pi">:</span>
       <span class="na">matchLabels</span><span class="pi">:</span>
         <span class="na">app</span><span class="pi">:</span> <span class="s">rails-app-service</span>
     <span class="na">endpoints</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="s">http</span> <span class="c1"># this is the port name you grabbed from your running service</span>
       <span class="na">interval</span><span class="pi">:</span> <span class="s">15s</span>
</code></pre></div><p>This will tell Prometheus to go and scrape that endpoint every 15 seconds and store any exposed metrics.</p>
<h4 id="add-a-networkpolicy-resource">Add a NetworkPolicy resource</h4><p>The Prometheus server is in the &lsquo;monitoring&rsquo; namespace, but by default, any network connections from outside your application&rsquo;s namespace will be blocked. So, to allow prometheus to scrape your application&rsquo;s <code>/metrics</code> endpoint, we need to add a network policy to allow connections from the monitoring namespace.</p>
<p>Create and apply a new resource <code>&lt;application&gt;-networkPolicy.yaml</code>, as below:</p>
<div class="highlight"><pre class="highlight yaml"><code>   <span class="na">kind</span><span class="pi">:</span> <span class="s">NetworkPolicy</span>
   <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
   <span class="na">metadata</span><span class="pi">:</span>
     <span class="na">name</span><span class="pi">:</span> <span class="s">allow-prometheus-scraping</span>
     <span class="na">namespace</span><span class="pi">:</span> <span class="s">my-app-namespace</span>
   <span class="na">spec</span><span class="pi">:</span>
     <span class="na">podSelector</span><span class="pi">:</span>
       <span class="na">matchLabels</span><span class="pi">:</span>
         <span class="na">app</span><span class="pi">:</span> <span class="s">rails-app</span>
     <span class="na">policyTypes</span><span class="pi">:</span>                                                                                                                                                         
     <span class="pi">-</span> <span class="s">Ingress</span>
     <span class="na">ingress</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="na">from</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="na">namespaceSelector</span><span class="pi">:</span>
           <span class="na">matchLabels</span><span class="pi">:</span>
             <span class="na">component</span><span class="pi">:</span> <span class="s">monitoring</span>
</code></pre></div><h4 id="querying-metrics">Querying metrics</h4><p>We can now query our <code>/metric</code> endpoint using the Cloud Platform Prometheus.</p>
<p>Head to <a href="https://prometheus.cloud-platform.service.justice.gov.uk/graph">Cloud Platform Prometheus</a> and use the following promql query to view the application latency (remembering to change the namespace value):</p>
<div class="highlight"><pre class="highlight plaintext"><code>http_server_request_duration_seconds_sum{namespace="my-namespace"}
</code></pre></div><p>The output will be something like:
<a href="../images/prometheus.png" target="_blank" rel="noopener noreferrer"><img src="/images/../images/prometheus.png" alt="Image of prometheus output" /></a></p>
<h4 id="example-in-full">Example in full</h4><p>If you&rsquo;d like to see the changes I&rsquo;ve made to the <a href="https://github.com/ministryofjustice/cloud-platform-multi-container-demo-app">cloud-platform-multi-container-demo-app</a>, please see this <a href="https://github.com/ministryofjustice/cloud-platform-multi-container-demo-app/pull/7">PR</a>.</p>
<h4 id="applications-configured-to-use-multiple-processes">Applications configured to use multiple processes</h4><p>If you&rsquo;re using a pre-forking web server (like unicorn or puma for Ruby, or gunicorn for Python) and have it configured to use multiple processes, then you need to use a Prometheus client library that supports exporting metrics from multiple processes. Not all the official clients do that. If you don&rsquo;t use a library which supports this, then requests to <code>/metrics</code> could be served by any of the processes, which would mean Prometheus sees inconsistent data on each scrape. The <code>prometheus-client</code> library we used in the example above supports multi-process metrics so will need to be aggregated, to report coherent total numbers. For more information on this please read <a href="https://github.com/prometheus/client_ruby#aggregation-settings-for-multi-process-stores">this</a> article.</p>
<h4 id="more-information-on-service-monitors">More information on Service Monitors</h4><p><a href="https://coreos.com/blog/the-prometheus-operator.html">CoreOS Blog on Prometheus Operator and ServiceMonitor</a></p>
<p><a href="https://github.com/coreos/prometheus-operator#customresourcedefinitions">CoreOS README on Custom Resource Definitions</a></p>
<p><a href="https://coreos.com/operators/prometheus/docs/latest/user-guides/running-exporters.html">Example ServiceMonitors</a></p>
