<h3 id="setup-postgres-container">Setup Postgres container</h3><p>If you need to quickly create DB for test/dev, you can set up a pod in your namespace running postgres in a container. Deploying <a href="https://github.com/helm/charts/tree/master/stable/postgresql">Bitnami PostgreSQL</a> as Helm Chart is the easiest way to get started with PostgreSQL on Kubernetes. This chart bootstraps a PostgreSQL deployment on a Kubernetes cluster using the Helm package manager.</p>
<p>The <a href="tasks.html#deploying-an-application-to-the-cloud-platform-with-helm">django-reference-application</a> uses Bitnami PostgreSQL Helm Chart to add a postgres instance, you can use the same Chart to setup postgres in your namespace.</p>

<blockquote>
<p>Note: Even though we are going to install a database within the Kubernetes cluster, it is recommended to use a database as a service offering such as <a href="https://aws.amazon.com/rds/">AWS RDS</a> if running in production.</p>
</blockquote>
<h5 id="requirements">Requirements</h5><p>It is assumed you have the following:</p>

<ul>
<li>You have <a href="tasks.html#creating-a-cloud-platform-environment">created an environment for your application</a></li>
<li>You have installed <a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">Kubectl</a> on your local machine.</li>
<li>You have <a href="tasks.html#authentication">Authenticated</a> to the cloud-platform-live-1 cluster.</li>
<li>You have configured <a href="tasks.html#using-helm">Helm and Tiller</a>. </li>
</ul>
<h5 id="set-up">Set up</h5><p>First copy <a href="https://github.com/ministryofjustice/cloud-platform-reference-app/blob/master/helm_deploy/django-app/charts/postgresql/values.yaml">values.yaml</a> file in to your working directory. You now have a <a href="https://github.com/helm/charts/tree/master/stable/postgresql">Bitnami PostgreSQL</a> Helm Chart &ldquo;values.yaml&rdquo; file. If you need to create your own values for postgresqlUsername,postgresqlPassword and postgresqlDatabase you can update the <code>values.yaml</code> or provide those as an argument on our installation command, the <code>set postgresql values</code> overwrites the value stored in <code>value.yaml</code> file.</p>
<p>Run the following (replacing the <code>YourName</code> with your own name and <code>env-name</code> with your environment name:</p>
<div class="highlight"><pre class="highlight plaintext"><code>    $ helm install --name &lt;YourName&gt; -f values.yaml stable/postgresql \
      --namespace &lt;env-name&gt; \
      --set postgresqlUsername=postgres,postgresqlPassword=secretpassword,postgresqlDatabase=my-database \
      --tiller-namespace &lt;env-name&gt;
</code></pre></div><h5 id="viewing-your-postgresql-db">Viewing your PostgreSQL DB</h5><p>You can now check PostgreSQL Helm Chart is deployed sucessfully:</p>
<div class="highlight"><pre class="highlight plaintext"><code>$ kubectl get pods --namespace &lt;env-name&gt;
</code></pre></div><p>If the Installation was successful you should be seeing something similar to the below:</p>
<div class="highlight"><pre class="highlight plaintext"><code>NAME                              READY     STATUS    RESTARTS   AGE
&lt;YourName&gt;-postgresql-0           1/1       Running   0          39m
</code></pre></div><p>You should have a postgres pod with the status <strong>running</strong>. You can also check the logs of the PostgreSQL pod:</p>
<div class="highlight"><pre class="highlight plaintext"><code>$ kubectl --namespace &lt;env-name&gt; logs &lt;YourName&gt;-postgresql-0 
</code></pre></div><p>If the PostgreSQL setup was successful you should be seeing tail of log as below:</p>
<div class="highlight"><pre class="highlight plaintext"><code> 12:49:28.02 INFO  ==&gt; ** PostgreSQL setup finished! **
</code></pre></div><h5 id="accessing-your-postgresql-db">Accessing your PostgreSQL DB</h5><p>PostgreSQL can be accessed via port 5432 on the following DNS name from within your cluster:</p>
<div class="highlight"><pre class="highlight plaintext"><code>&lt;YourName&gt;-postgresql.&lt;env-name&gt;.svc.cluster.local - Read/Write connection
</code></pre></div><p>The <code>postgresqlPassword</code> you have set will be stored as a secret in your namespace, to get the password for &ldquo;postgres&rdquo; run:</p>
<div class="highlight"><pre class="highlight plaintext"><code>export POSTGRES_PASSWORD=$(kubectl get secret --namespace &lt;env-name&gt; &lt;YourName&gt;-postgresql -o jsonpath="{.data.postgresql-password}" | base64 --decode)
</code></pre></div><p>To connect to your database from outside the cluster execute the following commands:</p>
<div class="highlight"><pre class="highlight plaintext"><code>kubectl port-forward --namespace &lt;env-name&gt; svc/&lt;YourName&gt;-postgresql 5432:5432 &amp;
PGPASSWORD="$POSTGRES_PASSWORD" psql --host 127.0.0.1 -U postgres -d my-database -p 5432
</code></pre></div><p>Congratulations on getting this far. If all went well your postgresql pod is now deployed and you could connect to your database from outside the cluster.</p>
