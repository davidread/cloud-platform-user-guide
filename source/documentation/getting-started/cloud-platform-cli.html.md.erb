---
title: The Cloud Platform CLI
last_reviewed_on: 2020-07-29
review_in: 3 months
---

# <%= current_page.data.title %>

The [cloud platform cli] is a command-line tool to help you work with the cloud
platform.

The idea is to enable you to manage resources in your environment without
always needing to craft your terraform or kubernetes yaml files by hand, and to
simplify some common tasks (like checking the github teams in your kube config
file).

## Installation

The CLI tool is written in [golang], and packaged as a single `cloud-platform`
binary. You can get the latest version from the [releases] page of the github
repository. Download whichever tarball is appropriate for your development
environment, unpack it and put the `cloud-platform` binary somewhere on your
`$PATH`

If you're on a Mac, you can do this by running the following commands:

```bash
LATEST=$(curl --silent https://github.com/ministryofjustice/cloud-platform-cli/releases/latest | sed 's/.*releases.tag.\(.*\)".*/\1/')
TARBALL="cloud-platform-cli_${LATEST}_darwin_amd64.tar.gz"
wget https://github.com/ministryofjustice/cloud-platform-cli/releases/download/${LATEST}/${TARBALL}
tar xzf ${TARBALL}
mv cloud-platform /usr/local/bin
rm ${TARBALL}
```

After this, you should be able to run:

```bash
$ cloud-platform version
```

...to confirm that your installation is working.

### Auto-update

The `cloud-platform` binary will update itself whenever it detects a new
version, so you should only ever have to install it once.

## Functions

This describes the current capabilities of the CLI tool.

* [Create an environment](#create-an-environment)
* [Add an ECR to your namespace](#add-an-ecr-to-your-namespace)
* [Add an RDS to your namespace](#add-an-rds-to-your-namespace)
* [Add an S3 Bucket to your namespace](#add-an-s3-bucket-to-your-namespace)
* [Add a service account to your namespace](#add-a-service-account-to-your-namespace)
* [Check your kubernetes config file](#check-your-kubernetes-config-file)

### Create an environment

* Start from the root of a working copy of the [environments repository]
* Create a new branch
* Run `cloud-platform environment create`

    You will be prompted to answer some questions about the environment (i.e.
    namespace) that you are creating. Once the process is complete, you will
    have a new [namespace folder] in your working copy.

* `git add` and `git commit` the new files, and raise a PR

After the cloud platform team have approved your PR, please merge it, and your
namespace will be created a few minutes later.

> The other `cloud-platform environment ...` commands, which manage resources
in your namespace, all assume that your namespace conforms to the templates
generated by this command.

### Add an ECR to your namespace

* Start from the root of a working copy of the [environments repository]
* Create a new branch
* `cd` into your [namespace folder]
* Run `cloud-platform environment ecr create`

    This will create a `resources/ecr.tf` file in your working copy.

* `git add` and `git commit` the new file, and raise a PR

After the cloud platform team have approved your PR, please merge it, and your
ECR will be created a few minutes later.

When your ECR has been created, you will see a new kubernetes secret in your
namespace called `ecr-repo-[namespace name]`. This secret contains the
credentials you will need in order to use your ECR.

> The CLI tool assumes you already have a `resources/variables.tf` file below
your namespace folder, and that this defines all the variables which appear in
the template `ecr.tf` file. If this is not the case, you may need to amend the
generated file.

### Add an RDS to your namespace

* Start from the root of a working copy of the [environments repository]
* Create a new branch
* `cd` into your [namespace folder]
* Run `cloud-platform environment rds create`

    This will create a `resources/rds.tf` file in your working copy.

* `git add` and `git commit` the new file, and raise a PR

After the cloud platform team have approved your PR, please merge it, and your
RDS will be created a little while later (it usually takes about 20 minutes for
an RDS instance to be created).

When your RDS has been created, you will see a new kubernetes secret in your
namespace called `rds-instance-output`. This secret contains the credentials
you will need in order to access your database.

> The CLI tool assumes you already have a `resources/variables.tf` file below
your namespace folder, and that this defines all the variables which appear in
the template `rds.tf` file. If this is not the case, you may need to amend the
generated file.

### Add an S3 Bucket to your namespace

* Start from the root of a working copy of the [environments repository]
* Create a new branch
* `cd` into your [namespace folder]
* Run `cloud-platform environment s3 create`

    This will create a `resources/s3.tf` file in your working copy.

* `git add` and `git commit` the new file, and raise a PR

After the cloud platform team have approved your PR, please merge it, and your
S3 bucket will be created a little while later.

When your S3 bucket has been created, you will see a new kubernetes secret in your
namespace called `s3`. This secret contains the credentials
you will need in order to access your s3 bucket.

> The CLI tool assumes you already have a `resources/variables.tf` file below
your namespace folder, and that this defines all the variables which appear in
the template `s3.tf` file. If this is not the case, you may need to amend the
generated file.

### Add a service account to your namespace

* Start from the root of a working copy of the [environments repository]
* Create a new branch
* `cd` into your [namespace folder]
* Run `cloud-platform environment serviceaccount create`

    This will create a `05-serviceaccount.yaml` file in your working copy.

* `git add` and `git commit` the new file, and raise a PR

By default your service account name will be `cloud-platform-user`. If you'd like to specify the name of your service account resource, you can use the `-n` or `--name` flag followed by the name of your choice.

After the cloud platform team have approved your PR, please merge it, and your
service account resource will be created.

You can query your new resource using the command `kubectl get serviceaccount -n <namespace>`.

### Check your kubernetes config file

You can use the CLI tool to verify the github teams listed in your `id-token`
in your `~/.kube/config` file. Missing github teams are sometimes a reason why
people are unable to access objects in their namespaces.

To check your kube config id-token, run this command:

```bash
$ cloud-platform kubecfg id-token-claims
```

You should see output similar to this:

```bash
{
        "aud": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
        "email": "david@whatever.com",
        "email_verified": true,
        "exp": 9999999999,
        "https://k8s.integration.dsd.io/groups": [
                "github:webops",
                "github:technical-architects",
                "github:moj-cjse"
        ],
        "iat": 9999999999,
        "iss": "https://justice-cloud-platform.eu.auth0.com/",
        "name": "David Salgado",
        "nickname": "digitalronin",
        "picture": "https://avatars2.githubusercontent.com/u/2338?v=4",
        "sub": "github|2338",
        "updated_at": "2020-04-27T09:44:33.971Z"
}
```

The github teams are listed under `https://k8s.integration.dsd.io/groups` as
above.

[cloud platform cli]: https://github.com/ministryofjustice/cloud-platform-cli#cloud-platform-tool-cli
[releases]: https://github.com/ministryofjustice/cloud-platform-cli#cloud-platform-tool-cli/releases
[golang]: https://golang.org
[environments repository]: https://github.com/ministryofjustice/cloud-platform-environments
[namespace folder]: https://github.com/ministryofjustice/cloud-platform-environments/tree/main/namespaces/live-1.cloud-platform.service.justice.gov.uk
