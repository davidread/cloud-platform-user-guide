---
title: Creating an ECR repository
last_reviewed_on: 2020-11-11
review_in: 3 months
---

# <%= current_page.data.title %>

## Introduction

This guide will guide you through the creation of an ECR (Elastic Container Registry) repository for your application's docker image.

AWS resources are provisioned through the [cloud-platform-environments](https://github.com/ministryofjustice/cloud-platform-environments/) repository, per environment. Your application might be using multiple namespaces, however you typically only need one image repository and once created in any of them you can copy credentials for it to the others via `kubectl get/create secret`.

### Creating the registry

You need to have the [Cloud Platform CLI] tool installed.

1. Clone the environments repo and create a new branch

```bash
$ git clone git@github.com:ministryofjustice/cloud-platform-environments.git
$ cd cloud-platform-environments
$ git checkout -b add_ecr
```

2. Navigate to your namespace directory

```bash
$ cd namespaces/live-1.cloud-platform.service.justice.gov.uk/$your_service
```

3. Use the CLI tool to create your ECR

```bash
$ cloud-platform environment ecr create
```

This will create a `resources/ecr.tf` file in your namespace folder.

4. git add, commit and push to your branch

5. Raise a PR to have your change approved

Once your pull request has been approved and merged, it will trigger our build pipeline which will create your ECR.

For more information about the terraform module being used, please read the documentation [here](https://github.com/ministryofjustice/cloud-platform-terraform-ecr-credentials).

## Accessing the credentials

After your ECR has been created, there will be a [Kubernetes secret] in your namespace, called `ecr-repo-[your-namespace]`

The secret stores the IAM access keys to authenticate with the registry, and the actual repository URL.

To retrieve the credentials:

```
kubectl -n <namespace_name> get secrets/ecr-repo-[your-namespace] --template={{.data.access_key_id}} | base64 --decode
kubectl -n <namespace_name> get secrets/ecr-repo-[your-namespace] --template={{.data.secret_access_key}} | base64 --decode
```

## Managing your ECR repository

There is a maximum number of images per repository for Amazon Elastic Container Registry (ECR). If a new image is created and pushed to ECR on every code change, repositories can quickly fill up with new revisions. So it is important to regularly delete images which are no longer required.

You can delete an image with the AWS CLI using this [guide][delete-ecr-image].

You can create [custom-alerts][custom-alerts] to monitor the number of ECR images in your Repository using [Prometheus ecr-metrics][ecr-metrics].

### Setting up CircleCI

In your CircleCI project, go to the settings (the cog icon) and select 'AWS Permissions' from the left hand menu. Fill in the IAM credentials from the kubernetes secret, and CircleCI will be able to pull images from your ECR. For more information please see [the official docs](https://circleci.com/docs/2.0/private-images/).

## Next steps

Try [deploying an app][deploy-helm] with [Helm](https://helm.sh/), a Kubernetes package manager, or [deploying manually][deploy-hello-world] by writing some custom YAML files.

[deploy-hello-world]: /documentation/deploying-an-app/helloworld-app-deploy.html#deploying-a-39-hello-world-39-application-to-the-cloud-platform
[deploy-helm]: /documentation/deploying-an-app/app-deploy-helm.html#deploying-an-application-to-the-cloud-platform-with-helm
[delete-ecr-image]: https://docs.aws.amazon.com/AmazonECR/latest/userguide/delete_image.html
[custom-alerts]: /documentation/monitoring-an-app/how-to-create-alarms.html#creating-your-own-custom-alerts
[ecr-metrics]: https://prometheus.cloud-platform.service.justice.gov.uk/graph?g0.range_input=1h&g0.expr=aws_ecr_repository_image_count&g0.tab=1
[Kubernetes secret]: https://kubernetes.io/docs/concepts/configuration/secret/
[Cloud Platform CLI]: cloud-platform-cli.html
