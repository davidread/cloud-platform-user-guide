---
title: Using the Cloud Platform Prometheus, AlertManager and Grafana
last_reviewed_on: 2021-02-24
review_in: 3 months
---

# <%= current_page.data.title %>

### Introduction

This is a brief introduction to the Cloud Platform monitoring stack: Prometheus, AlertManager and Grafana.

### What is Prometheus?

Prometheus is an open-source systems monitoring and alerting toolkit originally built at SoundCloud. The Cloud Platform uses [Prometheus Operator from CoreOS](https://github.com/coreos/prometheus-operator) which allows a number of Prometheus instances to be installed on a cluster (although we currently use a single Prometheus instance for the whole cluster).

Prometheus scrapes metrics from instrumented jobs, either directly or via an intermediary push gateway for short-lived jobs. It stores all scraped samples locally and runs rules over this data to either aggregate and record new time series from existing data, or to generate alerts. Grafana or other API consumers can be used to visualize the collected data.

### What is AlertManager

[AlertManager] handles alerts sent by client applications such as the Prometheus server. It takes care of deduplicating, grouping, and routing them to the correct receiver integration such as PagerDuty. It also takes care of the silencing and inhibition of alerts.

### What is Grafana

[Grafana] allows you to query, visualize, alert on and understand your metrics no matter where they are stored. Create, explore, and share dashboards with your team and foster a data driven culture.

#### Creating dashboards

Grafana is set up as a stateless app, managed entirely through code. This helps achieve better availability, but it means that dashboards you create will not automatically persist in its database.

To create a dashboard:

1. Login to Grafana (see the links below) with your GitHub account. All users are able to edit dashboards but cannot save the changes. Find the dashboard titled 'Blank Dashboard' and modify it as you see fit.

2. When you are happy with your dashboard, click the share icon on the top right corner, select the `Export` tab, check the `Export for sharing externally` box and click on `View JSON`. Copy the resulting JSON string into a `ConfigMap` in your namespace.

To do this, create a YAML file like this:

```YAML
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: <my-dashboard>
  namespace: <my-namespace>
  labels:
    grafana_dashboard: ""
data:
  my-dashboard.json: |
    {
      [ ...your JSON document goes here, minus the outermost braces... ]
    }
```

Make sure that the JSON string is properly indented. Also, name of the key in the `ConfigMap` must end in `-dashboard.json` (as in `my-dashboard.json` above). Please note that you can have multiple dashboards exported in a single `ConfigMap` as well.

3. Use `kubectl` to apply the `ConfigMap` above, and your dashboard should be visible in Grafana shortly.

### How to access monitoring tools

All links provided below require you to authenticate with your Github account.

Prometheus: [https://prometheus.cloud-platform.service.justice.gov.uk](https://prometheus.cloud-platform.service.justice.gov.uk)

AlertManager: [https://alertmanager.cloud-platform.service.justice.gov.uk](https://alertmanager.cloud-platform.service.justice.gov.uk/)

Grafana: [https://grafana.cloud-platform.service.justice.gov.uk](https://grafana.cloud-platform.service.justice.gov.uk)

### Further documentation

[Prometheus querying](https://prometheus.io/docs/prometheus/latest/querying/basics)

[AlertManager](https://prometheus.io/docs/alerting/alertmanager)
[Grafana]: https://grafana.com/
[Architecture](https://prometheus.io/docs/introduction/overview/###architecture)
