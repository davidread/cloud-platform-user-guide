---
title: Use IAM role  on the KOPS cluster to access resources in a different AWS account
last_reviewed_on: 2022-01-17
review_in: 3 months
---

# <%= current_page.data.title %>

 This article explains how to use an IAM role on the KOPS cluster to connect and authorize from applications running in Cloud platform to
 access AWS resources in a different AWS account.

 The Cloud Platform uses [KIAM](https://github.com/uswitch/kiam) to allow secured access to AWS APIs, by associating IAM roles to pods.
 By annotating the pod and the respective namespace, you can allow the application to assume a role, and can get temporary credentials to access AWS resources.

 To do this:

1. **Create the IAM role**

    Create a file (cross-iam-role.tf) inside your environment folder in the [cloud-platform-environments](https://github.com/ministryofjustice/cloud-platform-environments) repo,
update the template below with the correct values and raise a PR.

      <details>
      <summary>Click here to see a template code block</summary>
      <pre><code>
        data "aws_iam_policy_document" "&lt;namespace&gt;-kiam-trust-chain" {
          # KIAM trust chain to allow pods to assume roles defined below
          statement {
            principals {
              type        = "AWS"
              identifiers = [data.aws_iam_role.nodes.arn]
            }
            actions = ["sts:AssumeRole"]
          }
        }
        variable "&lt;namespace&gt;-tags" {
          type = map(string)
          default = {
            business-unit          = "&lt;Which part of the MoJ is responsible for this service? (e.g HMPPS, Legal Aid Agency)&gt;"
            application            = "&lt;Application name&gt;"
            is-production          = "&lt;true/false&gt;"
            environment-name       = "&lt;dev/test/staging/prod&gt;"
            owner                  = "&lt;team responsible for this application&gt;"
            infrastructure-support = "&lt;Email address for contact/support&gt;"
          }
        }
        resource "aws_iam_role" "&lt;namespace&gt;-&lt;role-name&gt;" {
          name               = "&lt;namespace&gt;-&lt;role-name&gt;"
          description        = "IAM role for XXXX"
          tags               = var.&lt;namespace&gt;-tags
          assume_role_policy = data.aws_iam_policy_document.&lt;namespace&gt;-kiam-trust-chain.json
        }
        resource "kubernetes_secret" "&lt;secret-name-in-your-namespace&gt;" {
          metadata {
            name      = "&lt;secret-name-in-your-namespace&gt;"
            namespace = "&lt;namespace&gt;"
          }
          data = {
            arn       = aws_iam_role.&lt;namespace&gt;-&lt;role-name&gt;.arn
            name      = aws_iam_role.&lt;namespace&gt;-&lt;role-name&gt;.name
            unique_id = aws_iam_role.&lt;namespace&gt;-&lt;role-name&gt;.unique_id
          }
        }
        data "aws_iam_policy_document" "&lt;namespace&gt;-&lt;role-name&gt;" {
          # allow pods to assume this role
          statement {
            actions   = ["sts:AssumeRole"]
            resources = [aws_iam_role.&lt;namespace&gt;-&lt;role-name&gt;.arn]
          }
          # Provide list of permissions and target AWS account resources to allow access from
          statement {
            actions = [
              "&lt;some action&gt;",
            ]
            resources = [
              "&lt;ARN of resource in target AWS account&gt;/*",
            ]
          }
        }
        resource "aws_iam_policy" "&lt;namespace&gt;-&lt;policy-name&gt;" {
          name   = "&lt;namespace&gt;-&lt;policy-name&gt;"
          policy = data.aws_iam_policy_document.&lt;namespace&gt;-&lt;policy-name&gt;.json
        }
        resource "aws_iam_role_policy_attachment" "&lt;namespace&gt;-&lt;policy-name&gt;" {
          role       = aws_iam_role.&lt;namespace&gt;-&lt;role-name&gt;.name
          policy_arn = aws_iam_policy.&lt;namespace&gt;-&lt;policy-name&gt;.arn
        }
    </code>
    </pre>
    </details>

    <details><summary> Here is an example using the template above, with typical values provided</summary>
    <pre><code>
        data "aws_iam_policy_document" "my-namespace-kiam-trust-chain" {
        # KIAM trust chain to allow pods to assume roles defined below
          statement {
            principals {
              type        = "AWS"
              identifiers = [data.aws_iam_role.nodes.arn]
            }
            actions = ["sts:AssumeRole"]
          }
        }
        variable "my-namespace-tags" {
          type = map(string)
          default = {
            business-unit          = "Cloud Platform"
            application            = "My Application"
            is-production          = "false"
            environment-name       = "Development"
            owner                  = "cloud-platform"
            infrastructure-support = "platforms@digital.justice.gov.uk"
          }
        }
        resource "aws_iam_role" "my-namespace-app-iam-role" {
          name               = "my-namespace-app-iam-role"
          description        = "IAM role for My app to access s3 bucket - AAA in 11111 AWS account"
          tags               = var.my-namespace-tags
          assume_role_policy = data.aws_iam_policy_document.my-namespace-kiam-trust-chain.json
        }
        resource "kubernetes_secret" "iam-role-creds-my-app" {
          metadata {
            name      = "iam-role-creds-my-app"
            namespace = "my-namespace"
          }
          data = {
            arn       = aws_iam_role.my-namespace-app-iam-role.arn
            name      = aws_iam_role.my-namespace-app-iam-role.name
            unique_id = aws_iam_role.my-namespace-app-iam-role.unique_id
          }
        }
        data "aws_iam_policy_document" "my-namespace-app-iam-role" {

          # allow pods to assume this role
          statement {
            actions   = ["sts:AssumeRole"]
            resources = [aws_iam_role.my-namespace-app-iam-role.arn]
          }
          # Provide list of permissions and target AWS account resources to allow access from
          statement {
            actions = [
              "s3.PutObject",
            ]
            resources = [
              "arn:aws:s3:::AAAAAAAA/AA-bucket/folder/*",
            ]
          }
        }
        resource "aws_iam_policy" "my-namespace-app-iam-policy" {
          name   = "my-namespace-app-iam-policy"
          policy = data.aws_iam_policy_document.my-namespace-app-iam-policy.json
        }
        resource "aws_iam_role_policy_attachment" "my-namespace-app-iam-policy" {
          role       = aws_iam_role.my-namespace-app-iam-role.name
          policy_arn = aws_iam_policy.my-namespace-app-iam-policy.arn
        }
    </code>
    </pre>
    </details>


2. **Annotate the pod with the IAM role**

    Once the PR in **step 1** is merged and applied, you will get the role ARN, name and ID as a kubernetes secret in your namespace.

    Decode the role ARN and annotate the pod to indicate which role will need access to the resource in the other AWS account.

    A deployment with the Pod template annotated would look like this (note the `<role-name>`):

      ```
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: wordpress
        namespace: my-namespace
        labels:
          app: wordpress
      spec:
        replicas: 2
        selector:
          matchLabels:
            app: wordpress
            tier: frontend
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              app: wordpress
              tier: frontend
            annotations:
              iam.amazonaws.com/role: <role-name>
          spec:
            containers:
            - image: wordpressdemo/wpapp:1.1
              name: wordpress
      ```

    An example role arn annotated in the deployment would look like this:

      ```
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: wordpress
        namespace: my-namespace
        labels:
          app: wordpress
      spec:
        replicas: 2
        selector:
          matchLabels:
            app: wordpress
            tier: frontend
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              app: wordpress
              tier: frontend
            annotations:
              iam.amazonaws.com/role: my-namespace-app-iam-role
          spec:
            containers:
            - image: wordpressdemo/wpapp:1.1
              name: wordpress
      ```

3. **Annotate the namespace to allow the "AssumeRole"**

    Next, annotate the namespace to indicate which roles are permitted to be assumed within the namespace.

    Update the `annotations` section in your `00-namespace.yaml` file with the code below, and raise a PR:

      ```
      apiVersion: v1
      kind: Namespace
      metadata:
        name: my-namespace
        labels:
          cloud-platform.justice.gov.uk/is-production: "false"
          cloud-platform.justice.gov.uk/environment-name: "dev"
        annotations:
          cloud-platform.justice.gov.uk/business-unit: "Cloud Platform"
          cloud-platform.justice.gov.uk/application: "my-test-application"
          cloud-platform.justice.gov.uk/owner: "Cloud Platform: platforms@digital.justice.gov.uk"
          cloud-platform.justice.gov.uk/source-code: "https://github.com/ministryofjustice/cloud-platform-mywpapp"
          iam.amazonaws.com/permitted: "<role-name>"


      ```
    An example would look like this:

      ```
      apiVersion: v1
      kind: Namespace
      metadata:
        name: my-namespace
        labels:
          cloud-platform.justice.gov.uk/is-production: "false"
          cloud-platform.justice.gov.uk/environment-name: "dev"
        annotations:
          cloud-platform.justice.gov.uk/business-unit: "Cloud Platform"
          cloud-platform.justice.gov.uk/application: "my-test-application"
          cloud-platform.justice.gov.uk/owner: "Cloud Platform: platforms@digital.justice.gov.uk"
          cloud-platform.justice.gov.uk/source-code: "https://github.com/ministryofjustice/cloud-platform-mywpapp"
          iam.amazonaws.com/permitted: "my-namespace-app-iam-role"
      ```

4. **Use the IAM role in your application**

There are several ways you can use the role created to access the resource in the other AWS account.

For example, to call the AWS SDK for Ruby and get temporary AWS credentials, you could do this:

      role_credentials = Aws::AssumeRoleCredentials.new(
        role_arn: role_arn,
        role_session_name: "myapp_session"
      )

This will result in `role_credentials` being a hash consisting of an access key ID, a secret access key, and a security token.

For more details on using `assumeRole` check the AWS documentation for [AWS assume-role CLI](https://docs.aws.amazon.com/cli/latest/reference/sts/assume-role.html)
and [AW::AssumeRoleCredentials SDK](https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/AssumeRoleCredentials.html)


5.**Allow the IAM role to permit access in the target AWS account**

You also need to update the AWS resource policy of the target AWS account to allow the IAM role to perform actions.

Here is an example s3 bucket policy to allow an IAM role to perform specific actions:

      {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "Cross IAM permissions",
          "Effect": "Allow",
          "Principal": {
            "AWS": "arn:aws:iam::11111111:role/my-namespace-app-iam-role"
          },
          "Action": [
            "s3:PutObject",
            "s3:GetObject",
          ],
          "Resource": "arn:aws:s3:::target-s3-bucket/*"
        }
      ]
    }
