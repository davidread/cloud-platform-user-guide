---
title: Use IAM role to access resources in a different AWS account
last_reviewed_on: 2020-02-24
review_in: 3 months
---

# <%= current_page.data.title %>

 This article explains how to use IAM role to connect authorization from applications running in Cloud platform to 
 access AWS resources in a different AWS account. 

 Cloud Platform Infrastructure uses [KIAM](https://github.com/uswitch/kiam) to allow secured access to AWS APIs by associating IAM roles to Pods.
 Hence, by annotating the pod to allow them to assume a role you can get temporary role credentials to access other AWS account resources. 

 To acheive this, follow the steps below:

1. ***Create IAM role***
 
    Cloud Platform maintain these cross account roles in [cloud-platform-infrastructure](https://github.com/ministryofjustice/cloud-platform-infrastructure/tree/master/terraform/cross-account-IAM) repo.

    Create a file (<namespace>.tf), update the below template with correct values and raise a PR.

    <details><summary> Click to see a template code block </summary>
    <p>

    ```
    data "aws_iam_policy_document" "<namespace>-kiam-trust-chain" {
      # KIAM trust chain to allow pods to assume roles defined below
      statement {
        principals {
          type        = "AWS"
          identifiers = [data.aws_iam_role.nodes.arn]
        }
        actions = ["sts:AssumeRole"]
      }
    }

    variable "<namespace>-tags" {
      type = map(string)
      default = {
        business-unit          = "<Which part of the MoJ is responsible for this service? (e.g HMPPS, Legal Aid Agency)>"
        application            = "<Application name>"
        is-production          = "<true/false>"
        environment-name       = "<dev/test/staging/prod>"
        owner                  = "<team responsible for this application>"
        infrastructure-support = "<Email address for contact/support>"
      }
    }

    resource "aws_iam_role" "<namespace>-<role-name>" {
      name               = "<namespace>-<role-name>"
      description        = "IAM role for XXXX"
      tags               = var.<namespace>-tags
      assume_role_policy = data.aws_iam_policy_document.<namespace>-kiam-trust-chain.json
    }

    resource "kubernetes_secret" "<secret-name-in-your-namespace>" {
      metadata {
        name      = "<secret-name-in-your-namespace>"
        namespace = "<namespace>"
      }

      data = {
        arn       = aws_iam_role.<namespace>-<role-name>.arn
        name      = aws_iam_role.<namespace>-<role-name>.name
        unique_id = aws_iam_role.<namespace>-<role-name>.unique_id
      }
    }

    data "aws_iam_policy_document" "<namespace>-<role-name>" {

      # allow pods to assume this role
      statement {
        actions   = ["sts:AssumeRole"]
        resources = [aws_iam_role.<namespace>-<role-name>.arn]
      }

      # Provide list of permissions and target AWS account resources to allow access from
      statement {
        actions = [
          "<some action>",
        ]
        resources = [
          "<ARN of target resource>/*",
        ]
      }
    }

    resource "aws_iam_policy" "<namespace>-<policy-name>" {
      name   = "<namespace>-<policy-name>"
      policy = data.aws_iam_policy_document.<namespace>-<policy-name>.json
    }

    resource "aws_iam_role_policy_attachment" "<namespace>-<policy-name>" {
      role       = aws_iam_role.<namespace>-<role-name>.name
      policy_arn = aws_iam_policy.<namespace>-<policy-name>.arn
    }
    ```
    </p>
    </details>

    <details><summary> Click to see an example code block</summary>
    <p>


    ```
    data "aws_iam_policy_document" "my-namespace-kiam-trust-chain" {
    # KIAM trust chain to allow pods to assume roles defined below
    statement {
      principals {
        type        = "AWS"
        identifiers = [data.aws_iam_role.nodes.arn]
      }
      actions = ["sts:AssumeRole"]
    }
    }

    variable "my-namespace-tags" {
    type = map(string)
    default = {
      business-unit          = "Cloud Platform"
      application            = "My Application"
      is-production          = "false"
      environment-name       = "Development"
      owner                  = "cloud-platform"
      infrastructure-support = "platforms@digital.justice.gov.uk"
    }
    }

    resource "aws_iam_role" "my-namespace-app-iam-role" {
    name               = "my-namespace-app-iam-role"
    description        = "IAM role for My app to access s3 bucket - AAA in 11111 AWS account"
    tags               = var.my-namespace-tags
    assume_role_policy = data.aws_iam_policy_document.my-namespace-kiam-trust-chain.json
    }

    resource "kubernetes_secret" "iam-role-creds-my-app" {
    metadata {
      name      = "iam-role-creds-my-app"
      namespace = "my-namespace"
    }

    data = {
      arn       = aws_iam_role.my-namespace-app-iam-role.arn
      name      = aws_iam_role.my-namespace-app-iam-role.name
      unique_id = aws_iam_role.my-namespace-app-iam-role.unique_id
    }
    }

    data "aws_iam_policy_document" "my-namespace-app-iam-role" {

    # allow pods to assume this role
    statement {
      actions   = ["sts:AssumeRole"]
      resources = [aws_iam_role.my-namespace-app-iam-role.arn]
    }

    # Provide list of permissions and target AWS account resources to allow access from
    statement {
      actions = [
        "s3.PutObject",
      ]
      resources = [
        "arn:aws:s3:::AAA/folder/*",
      ]
    }
    }

    resource "aws_iam_policy" "my-namespace-app-iam-policy" {
    name   = "my-namespace-app-iam-policy"
    policy = data.aws_iam_policy_document.my-namespace-app-iam-policy.json
    }

    resource "aws_iam_role_policy_attachment" "my-namespace-app-iam-policy" {
    role       = aws_iam_role.my-namespace-app-iam-role.name
    policy_arn = aws_iam_policy.my-namespace-app-iam-policy.arn
    }
    ```
    </p>
    </details>


2. ***Annotate the pod with the IAM role***


3. ***Annotate the namespace to allow the role to AssumeRole***


4. ***Use the IAM role in your application***



 https://github.com/uswitch/kiam/blob/master/docs/IAM.md#application-roles
 
 