---
title: Having your own nginx ingress controller
last_reviewed_on: 2020-08-27
review_in: 3 months
---

# <%= current_page.data.title %>

### Background

Cloud Platform ingress controller(s) are having performance issues due to the amount of ingresses
handled. We are encouraging teams to host their own controllers so we don't have a single
service managing all ingresses.

Having your own ingress controller allows you to customise multiple load balancer components (error pages, HTTP errors,
backends, etc). You are not able to do that by using the cloud-platform's controller.

### Pre-Requisites

This guide assumes you have an environment already created in `live-1` cluster and defined in the [cloud-platform-environments repository](https://github.com/ministryofjustice/cloud-platform-environments)

### Deploying

```hcl
module "ingress_controller" {
  source = "github.com/ministryofjustice/cloud-platform-terraform-teams-ingress-controller?ref=0.0.8"

  namespace = var.namespace
  is_production = var.is_production
}
```

> The `is_production` value will determine how many ingress controller pods get
created. For production namespaces we run 2 pods, and 1 for non-production
namespaces.

> Please check that your `variables.tf` file defines an `is_production`
variable (`is-production` will not work).

After merging a PR which adds this file to your namespace `resources` folder in
the [environments repository], the pipeline will create one or more pods in the
`ingress-controllers` namespace.

> You cannot directly list the pods in the `ingress-controller` namespace, but
you can check this [grafana dashboard] to confirm that your ingress-controller
pod exists. Check any of the lists to see if there is an entry which includes
your namespace name.

### Using the new ingress-controller

By default, ingresses will always use cloud-platform's ingress controller
unless indicated otherwise. In order to use the controller deployed
the following annotation must be added to your
[ingress.yaml](https://kubernetes.io/docs/concepts/services-networking/ingress/) file:

```yaml
  annotations:
    kubernetes.io/ingress.class: <your-namespace-name>
```

`kubernetes.io/ingress.class` specifies the controller name (which has the
same namespace name) which is going to claim that ingress. If nothing is specified
it will use the default one ("nginx") which is the name hold by cloud-platform's controller.

When you add this annotation to your `ingress.yaml` and apply it to the cluster, two things happen:

1. Your namespace's VirtualHost entry is removed from the default ingress controller, and
2. A new VirtualHost entry (the only one) is added to your dedicated ingress controller

This happens instantaneously. So, at this point, the default ingress controller
"forgets" how to handle traffic to your domain name, and the dedicated ingress
controller learns how to do it.

> Users of your service may still have a cached DNS entry pointing to the old,
shared load-balancer. So, requests for your service will still hit the old
ingress controller until the users' DNS cache expires. So, in effect, your
service is temporarily down for some users, for a couple of minutes.

### Certificates

There are two possibilities for how you need to manage SSL certificates in light
of the change to dedicated ingress controllers.

#### If your services use the Cloud Platform wildcard domain

If the service in your namespace is using a domain matching:

```
*.apps.live-1.cloud-platform.service.justice.gov.uk
```

Then you should **not** add a `certificate.yaml` file to your namespace, and
you should **not** specify a `secretName` in your `ingress.yaml` file.

This will cause your ingress to use the cluster default SSL certificate, which
matches the wildcard domain.

#### If your services use a custom domain name

If you are using any other domain name, you should already have a
`certificate.yaml` file in your namespace. This will have a `secretName`
defining a kubernetes secret in your namespace (automatically created by
`cert-manager`), and your `ingress.yaml` should reference this secret.

i.e. if you are using a custom domain, you don't need to change anything about
your SSL certificate setup when you switch from the default ingress controller
to a dedicated ingress controller.

See [this page](custom-domain-cert.html) for more information about custom
domains.

### More information

[environments repository]: https://github.com/ministryofjustice/cloud-platform-environments
[grafana dashboard]: https://grafana.cloud-platform.service.justice.gov.uk/d/bbb2a765a623ae38130206c7d94a160f/kubernetes-networking-namespace-workload?orgId=1&refresh=10s&var-datasource=default&var-namespace=ingress-controllers&var-type=deployment&var-resolution=5m&var-interval=4h
